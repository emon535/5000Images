{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["DataTable","lazy","Promise","all","__webpack_require__","e","then","bind","App","react_default","a","createElement","Spinner","type","color","build_default","className","showAt","speed","easing","esm","Provider","value","index_esm","react","fallback","this","_getLoader","_getBackToTopButton","_getFooter","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mTAQMA,EAAYC,eAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YA8DdC,GA7DAP,eAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,iMAItB,OACEE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASC,KAAK,OAAOC,MAAM,YAC3BL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASC,KAAK,OAAOC,MAAM,cAC3BL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASC,KAAK,OAAOC,MAAM,YAC3BL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASC,KAAK,OAAOC,MAAM,WAC3BL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASC,KAAK,OAAOC,MAAM,YAC3BL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASC,KAAK,OAAOC,MAAM,SAC3BL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASC,KAAK,OAAOC,MAAM,UAC3BL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASC,KAAK,OAAOC,MAAM,wDAM/B,OACEL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CACEM,UAAU,YACVC,OAAQ,IACRC,MAAO,KACPC,OAAO,kBAEPV,EAAAC,EAAAC,cAACS,EAAA,EAAYC,SAAb,CAAsBC,MAAO,CAAER,MAAO,YACpCL,EAAAC,EAAAC,cAACY,EAAA,EAAD,6CAON,OACEd,EAAAC,EAAAC,cAAA,OAAKK,UAAU,UACbP,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAIK,UAAU,qBAHhB,+BAKEP,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,6CAMJ,OACEF,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAAA,MAAIK,UAAU,WAAd,iBACAP,EAAAC,EAAAC,cAACa,EAAA,SAAD,CAAUC,SAAUC,KAAKC,cAEvBlB,EAAAC,EAAAC,cAACX,EAAD,OAED0B,KAAKE,sBACLF,KAAKG,qBArDIC,cCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC","file":"static/js/main.2634741a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Spinner } from \"reactstrap\";\nimport { Suspense, lazy } from \"react\";\nimport \"./App.css\";\nimport BackToTop from \"react-back-to-top-button\";\nimport { FaChevronCircleUp } from \"react-icons/fa\";\nimport { IconContext } from \"react-icons\";\n\nconst DataTable = lazy(() => import(\"./Components/DataTable/DataTable\"));\nconst Images = lazy(() => import(\"./Components/ImageList/ImageList\"));\n\nclass App extends Component {\n  _getLoader() {\n    return (\n      <div>\n        <Spinner type=\"grow\" color=\"primary\" />\n        <Spinner type=\"grow\" color=\"secondary\" />\n        <Spinner type=\"grow\" color=\"success\" />\n        <Spinner type=\"grow\" color=\"danger\" />\n        <Spinner type=\"grow\" color=\"warning\" />\n        <Spinner type=\"grow\" color=\"info\" />\n        <Spinner type=\"grow\" color=\"light\" />\n        <Spinner type=\"grow\" color=\"dark\" />\n      </div>\n    );\n  }\n\n  _getBackToTopButton() {\n    return (\n      <BackToTop\n        className=\"up-button\"\n        showAt={100}\n        speed={1500}\n        easing=\"easeInOutQuint\"\n      >\n        <IconContext.Provider value={{ color: \"#f2f2f2\" }}>\n          <FaChevronCircleUp />\n        </IconContext.Provider>\n      </BackToTop>\n    );\n  }\n\n  _getFooter() {\n    return (\n      <div className=\"footer\">\n        <br />\n        <br />\n        <hr className=\"light-white-line\" />\n        Powered by Foysal Ahemd Emon\n        <br />\n        <br />\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"heading\">Latest Albums</h1>\n        <Suspense fallback={this._getLoader()}>\n          {/* <Images /> */}\n          <DataTable />\n        </Suspense>\n        {this._getBackToTopButton()}\n        {this._getFooter()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}