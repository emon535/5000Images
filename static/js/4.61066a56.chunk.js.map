{"version":3,"sources":["Components/DataTable/DataTableView.js","AppConfig.js","Services/APIService/APIService.js","Services/DataService/DataService.js","Components/DataTable/DataTable.js"],"names":["DataTableView","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selected","rowSelected","selectionChanged","columns","id","width","Header","react_default","a","createElement","accessor","d","getProps","rowInfo","column","style","textAlign","className","height","src","thumbnailUrl","title","toUpperCase","url","slice","pageSizeOptions","_this2","console","log","data","Fragment","es","resizable","showPageJump","defaultPageSize","getTrProps","row","onClick","e","t","_onRowClick","index","setState","background","color","Component","AppConfig","base_url","api_base_url","APIService","initInterceptor","axios","interceptors","request","use","config","error","Promise","reject","response","status","window","location","href","unauthorizedUrl","get","post","Error","DataService","then","DataTable","getData","bind","assertThisInitialized","getRequiredData","_rowClickHandler","Components_DataTable_DataTableView","assign"],"mappings":"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","file":"static/js/4.61066a56.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\nimport \"./DataTableView.css\";\nimport AlbumInfo from \"../AlbumInfo/AlbumInfo\";\n\nclass DataTableView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: null,\n      rowSelected: null,\n      selectionChanged: false,\n      columns: [\n        {\n          id: \"id\",\n          width: 50,\n          Header: props => <span>ID</span>,\n          accessor: d => d.id,\n          getProps: (state, rowInfo, column) => {\n            return {\n              style: {\n                textAlign: \"center\"\n              }\n            };\n          }\n        },\n        {\n          id: \"image\",\n          Header: props => <span>Photo</span>,\n          accessor: d => {\n            return (\n              <div>\n                <img className=\"images\" height={30} src={d.thumbnailUrl} />\n              </div>\n            );\n          },\n\n          getProps: (state, rowInfo, column) => {\n            return {\n              style: {\n                textAlign: \"center\"\n              }\n            };\n          }\n        },\n        {\n          id: \"name\",\n          Header: \"Name\",\n          accessor: d => d.title.toUpperCase()\n        },\n        {\n          id: \"code\",\n          Header: \"Code\",\n          accessor: d => \" Color Code = #\" + d.url.toUpperCase().slice(32, 100)\n        },\n        {\n          id: \"description\",\n          Header: \"URL\",\n          accessor: d => d.url\n        }\n      ],\n      pageSizeOptions: [100, 250, 500, 1000, 5000]\n    };\n  }\n\n  render() {\n    console.log(this.props);\n    console.log(\"from view \", this.props.data);\n    return (\n      <React.Fragment>\n        <ReactTable\n          className=\"-striped -highlight\"\n          resizable={true}\n          showPageJump\n          defaultPageSize={50}\n          data={this.props.data}\n          columns={this.state.columns}\n          pageSizeOptions={this.state.pageSizeOptions}\n          getTrProps={(state, rowInfo) => {\n            if (rowInfo && rowInfo.row) {\n              return {\n                onClick: (e, t) => {\n                  this.props._onRowClick(e, t, rowInfo);\n                  if (rowInfo.index !== this.state.rowSelected) {\n                    this.setState({\n                      rowSelected: rowInfo.index,\n                      selectionChanged: this.state.selectionChanged\n                        ? false\n                        : true\n                    });\n                  } else {\n                    this.setState({\n                      rowSelected: null\n                    });\n                  }\n                },\n                style: {\n                  background:\n                    rowInfo.index === this.state.rowSelected\n                      ? \"#eaeaea\"\n                      : \"white\",\n                  color: \"#444444\"\n                }\n              };\n            } else {\n              return {};\n            }\n          }}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default DataTableView;\n","const AppConfig = {\n  base_url: \"\",\n  api_base_url: \"https://jsonplaceholder.typicode.com/photos\",\n  \n};\n\nexport default AppConfig;\n","import axios from \"axios\";\nimport AppConfig from \"../../AppConfig\";\n\nclass APIService {\n  static initInterceptor = () => {\n    axios.interceptors.request.use(\n      function(config) {\n        // if (config.url.indexOf('api') > -1) {\n        //     config.url = UtilService.getApiUrl(config.url, UtilService.getHostName());\n        // }\n\n        return config;\n      },\n      function(error) {\n        return Promise.reject(error);\n      }\n    );\n\n    axios.interceptors.response.use(\n      response => response,\n      error => {\n        if (error.response && error.response.status === 401)\n          window.location.href = AppConfig.unauthorizedUrl;\n        else return Promise.reject(error);\n      }\n    );\n  };\n\n  static get = (url, config) => {\n    return config ? axios.get(url, config) : axios.get(url);\n  };\n\n  static post = (url, data, config) => {\n    if (!data) {\n      throw new Error(\"Error: Post data not provided for \" + url);\n    }\n    return config ? axios.post(url, data, config) : axios.post(url, data);\n  };\n}\n\nAPIService.initInterceptor();\n\nexport default APIService;\n","import APIService from \"../APIService/APIService\";\n\nclass DataService {\n  constructor() {}\n\n  getRequiredData() {\n    return APIService.get(`https://jsonplaceholder.typicode.com/photos`).then(\n      response => {\n        return response.data;\n      }\n    );\n  }\n}\n\nexport default DataService;\n","import React, { Component } from \"react\";\nimport DataTableView from \"./DataTableView\";\nimport DataService from \"./../../Services/DataService/DataService\";\n\nclass DataTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    };\n\n    this.DataService = new DataService();\n    this.getData = this.getData.bind(this);\n\n    this._onRowClick = this._onRowClick.bind(this);\n  }\n\n  getData() {\n    this.DataService.getRequiredData().then(data => {\n      console.log(\"Getting Data\");\n      this.setState({\n        data: data\n      });\n      console.log(\"Updated Data\", this.state.data);\n    });\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  _onRowClick(e, t, rowInfo) {\n    this.props._rowClickHandler(rowInfo);\n  }\n\n  render() {\n    return <DataTableView {...this.state} _onRowClick={this._onRowClick} />;\n  }\n}\n\nexport default DataTable;\n"],"sourceRoot":""}